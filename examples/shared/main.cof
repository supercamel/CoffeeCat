/**
 * A visitor pattern demo.
 *
 * When an object is created in CoffeeCat, it is placed on the stack and destroyed when it goes out of scope. 
 * 
 * CoffeeCat can also create objects in a memory pool using the shared<> key word. 
 * This means the object will not be destroyed until it is no longer required, or until the entire memory pool itself is destroyed.
 *
 * There is a 'built-in' memory pool that pretty much all computers and micro-controllers have, and that is The Heap Of Doom.
 * This particular example uses the heap. 
 *
 * Once a shared object has been created, it's members can be accesses using '->' instead of '.' just like a pointer in C++. 
 * 
 */

extern_header("class Walker;")

class Node:
    void Accept(out Walker walker):
        walker.Visit(this)
        

class INode: Node
    void Accept(out Walker walker):
        walker.Visit(this)
    int value = 0

class OpNode: Node
    void Accept(out Walker walker):
        walker.Visit(this)
	
	void set_lh(copy var lhs):
		lh = static_cast<Node,lhs>
	
	void set_rh(copy var rhs):
		rh = static_cast<Node,rhs>
	
    var lh = shared<Node, heap>()
    var rh = shared<Node, heap>()
    
int main():
    var i1 = shared<INode, heap>()
    i1->value = 10
    
    var i2 = shared<INode, heap>()
    i2->value = 5
    
    var on = OpNode()
    
    on.set_lh(i1)
    on.set_rh(i2)
    
    var walker = Walker()
    on.Accept(walker)
